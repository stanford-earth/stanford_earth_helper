<?php
/**
 * @file
 *
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\Html;
use Drupal\system\Entity\Menu;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\taxonomy\Entity\Term;
use Drupal\pathauto\Entity\PathautoPattern;

/**
 * Change view mode to subsite for nodes with a reference.
 * @param [type]          $view_mode [description]
 * @param EntityInterface $entity    [description]
 * @param [type]          $context   [description]
 */
function stanford_subsites_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  $subsite_ref = stanford_subsites_get_parent_reference_from_entity($entity);

  if (
    $entity->getEntityTypeId() == 'node'
    && !empty($subsite_ref)
  ) {
    $view_mode = 'subsite';
  }
}

/**
 * [stanford_subsites_enity_view description]
 * @param  [type] $entity [description]
 * @return [type]         [description]
 */
function stanford_subsites_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  $subsite = NULL;

  // Only work on node entities.
  if ($entity->getEntityTypeId() !== 'node') {
    return;
  }

  // If this node is a parent subsite then use it.
  if ($entity->bundle() == "stanford_subsite") {
    $subsite = $entity;
  }

  // Check to see if there is a subsite reference from a parent item.
  $subsite_ref = stanford_subsites_get_parent_reference_from_entity($entity);
  if (isset($subsite_ref['target_id']) && is_numeric($subsite_ref['target_id'])) {
    $subsite = Node::load($subsite_ref['target_id']);
  }

  // Only work if there is a branding color available.
  if (!isset($subsite->field_s_subsite_branding_color)) {
    return;
  }

  $brand = $subsite->get('field_s_subsite_branding_color')->getValue();
  if (isset($brand[0]['value'])) {
    $color = $brand[0]['value'];
    $css = stanford_subsites_generate_css($color);
    // Cheat and attach it to the head.
    $build['#attached']['html_head'][] = [
      [
        '#tag' => 'style',
        '#value' => $css,
        '#attributes' => ['type' => 'text/css'],
      ],
      'branding-css',
    ];
  }
}

/**
 * [stanford_subsites_generate_css description]
 * @param  [type] $brand [description]
 * @return [type]        [description]
 */
function stanford_subsites_generate_css($brand) {
  // Colored header box.
  $css = ".layout--aiur #floating_sidebar__wrapper .floating_sidebar h2 { background-color: $brand; }\n";
  // Subnav left border on active.
  $css .= ".layout--aiur #floating_sidebar__wrapper .menu .menu-item--active-trail { border-color: $brand; }\n";
  // Nav link color.
  $css .= ".layout--aiur #floating_sidebar__wrapper .menu li a { color: $brand; }\n";

  return $css;
}

/**
 * Create a menu when creating a subsite.
 * @param  [type] $entity [description]
 * @return [type]         [description]
 */
function stanford_subsites_entity_insert(EntityInterface $entity) {

  // See if they field is available.
  $subsite_ref = stanford_subsites_get_parent_reference_from_entity($entity);

  // We only want new parent subsite nodes. If the subsite ref field is empty
  // then we assume that the new subsite node is a parent node.
  if ($entity->getEntityTypeId() !== "node"
    || $entity->bundle() !== "stanford_subsite"
    || !empty($subsite_ref)
  ) {
    return;
  }

  // CREATE A Menu to store the subsite navigation.
  $title = $entity->label();
  $menu_id = stanford_subsites_get_menu_name_from_subsite_entity($entity);

  try {
    $menu = Menu::load($menu_id);
  }
  catch (Exception $e) {
    // Could not load menu. Ok.
  }

  // If the menu already exists just skip creation. Something went wrong.
  if (!$menu) {
    $menu = Menu::create([
      'id' => $menu_id,
      'label' => $title,
      'description' => 'A subsite menu',
    ])->save();
    drupal_set_message("Created new menu for subsite", 'status', FALSE);

    $menu_link = MenuLinkContent::create([
      'title' => 'Overview',
      'link' => ['uri' => 'internal:/node/' . $entity->Id()],
      'menu_name' => $menu_id,
      'expanded' => FALSE,
    ]);
    $menu_link->save();
  }

  if (!$menu) {
    drupal_set_message("No subsite menu created. Menu ID already exists.", 'error', FALSE);
  }

  // If taxonomy term creation is enabled do so.
  $config = \Drupal::config('stanford_subsites.settings');
  if ($config->get('create_taxonomy_term')) {
    $vocab = $config->get('create_taxonomy_vocabulary');
    $term = Term::create([
      'name' => $title,
      'vid' => $vocab,
    ])->save();
  }
}

/**
 * [stanford_subsites_get_parent_reference_from_entity description]
 * @param  EntityInterface $entity [description]
 * @return [type]                  [description]
 */
function stanford_subsites_get_parent_reference_from_entity(EntityInterface $entity) {
  $subsite_ref = FALSE;

  try {
    $field = $entity->get('field_s_subsite_ref');
    if (!empty($field)) {
      $value = $field->getValue();
      $subsite_ref = array_pop($value);
    }
  }
  catch (Exception $e) {
    return FALSE;
  }

  return $subsite_ref;
}

/**
 * [stanford_subsites_get_menu_id_from_title description]
 * @param  [type] $title [description]
 * @return [type]        [description]
 */
function stanford_subsites_get_menu_name_from_subsite_entity($entity) {
  if (empty($entity)) {
    throw new Exception("No entity sent to function");
  }

  return "subsite-menu-" . $entity->id();
}

/**
 * When an entity is deleted and it is a subsite run cleanup.
 * @param  EntityInterface $entity [description]
 * @return [type]                  [description]
 */
function stanford_subsites_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== "node"
    || $entity->bundle() !== "stanford_subsite"
  ) {
    return;
  }

  $menu_id = stanford_subsites_get_menu_name_from_subsite_entity($entity);
  $menu = Menu::load($menu_id);

  if ($menu) {
    $menu->delete();
    drupal_set_message("Deleted subsite menu", 'success', FALSE);
  }
}

/**
 * [stanford_subsites_form_node_form_alter description]
 * @param  [type]             $form       [description]
 * @param  FormStateInterface $form_state [description]
 * @return [type]                         [description]
 */
function stanford_subsites_form_node_form_alter(&$form, FormStateInterface $form_state) {

  $user = \Drupal::currentUser();
  $subsiteadmin = $user->hasPermission('create top level stanford_subsites');

  // Only alter if the subsite reference field is available.
  if (!isset($form['field_s_subsite_ref'])) {
    return;
  }

  // Restrict the parent settings group from anyone without permission.
  foreach ($form['#group_children'] as $field_name => $group) {
    if ($group == "group_subsite_settings") {
      $form[$field_name]['#access'] = $subsiteadmin;
    }
  }

  // Attach javascript functionality.
  $form['#attached']['library'][] = "stanford_subsites/subsites_node_form";

}

/**
 * [stanford_subsites_pathauto_pattern_alter description]
 * @param  [type] $pattern [description]
 * @param  array  $context [description]
 * @return [type]          [description]
 */
function stanford_subsites_pathauto_pattern_alter(&$pattern, array $context) {
  $node = FALSE;

  // Only act on nodes.
  if ($context['module'] !== 'node') {
    return;
  }

  // Check for reference field.
  $node = $context['data']['node'];
  $fields = $node->getFields();
  if (!isset($fields['field_s_subsite_ref'])) {
    return;
  }

  // Get the value of the field.
  try {
    $field = $node->get('field_s_subsite_ref');
    $value = $field->getValue();
  }
  catch (Exception $e) {
    return;
  }

  // Parent.
  if (empty($value)) {
    $pattern = PathautoPattern::load('stanford_subsites_parent');
    return $pattern;
  }

  // Child.
  if ($value[0]['target_id']) {

    // Menu structure.
    $menu_field = $node->get('menu_link');
    $menu_value = $menu_field->getValue();
    if (empty($menu_value[0]['target_id'])) {
      // Top level child.
      $pattern = PathautoPattern::load('stanford_subsites');
    }
    else {
      $menu_link = MenuLinkContent::load($menu_value[0]['target_id']);
      if ($menu_link->getParentId() !== "") {
        // Nested child.
        $pattern = PathautoPattern::load('subsite_nested_child');
      }
      else {
        // Top level child.
        $pattern = PathautoPattern::load('stanford_subsites');
      }
    }
  }

  return $pattern;
}
