<?php

/**
 * @file
 * File description.
 *
 * Long description.
 */

use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\migrate\Row;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\stanford_earth_events\EarthEventsInfo;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_entity_delete().
 */
function stanford_earth_events_entity_delete(EntityInterface $entity) {

  // Only do this for stanford_event content.
  if ($entity->bundle() !== 'stanford_event') {
    return;
  }

  // Delete record from events info table.
  EarthEventsInfo::delete($entity->id());

  // Delete records from migration maps.
  $database = \Drupal::database();
  $eventTables = $database->schema()->findTables('migrate_map_earth_events_importer_%');
  foreach ($eventTables as $table) {
    if (strpos($table, "process") === FALSE) {
      if ($database->schema()->tableExists($table)) {
        $database->delete($table)
          ->condition('destid1', $entity->id())
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function stanford_earth_events_cron() {
}

/**
 * {@inheritdoc}
 */
function stanford_earth_events_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if (substr($migration->id(), 0, 21) === 'earth_events_importer') {
    $title = $row->getSourceProperty('title');
    $event = new EarthEventsInfo($row->getSourceProperty('guid'));

    // Force any keyword tags into a string
    $keywords = $row->getSourceProperty('field_s_event_tags');
    if (!empty($keywords)) {
      if (is_array($keywords)) {
        $keyword_str = implode(', ', $keywords);
      }
      else {
        $keyword_str = strval($keywords);
      }
      $row->setSourceProperty('field_s_event_tags', $keyword_str);
    }

    $more_info = $row->getSourceProperty('field_s_event_more_info');
    $localist_link = $row->getSourceProperty('link');
    if (empty($more_info) && !empty($localist_link) && is_string($localist_link)) {
      $row->setSourceProperty('field_s_event_more_info', $localist_link );
    }
    // If the event node already exists, set its id in the row data.
    if ($event->isValid()) {
      $entityid = $event->entityId();
      if (!empty($entityid)) {
        $row->setSourceProperty('nid', $entityid);
        $row->setDestinationProperty('nid', $entityid);
      }
    }
  }
  return TRUE;
}

function stanford_earth_events_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'stanford_earth_events');
  $theme_registry['views_view_ical_fields']['path'] = $path . '/templates';
}

/**
 * Implements hook_views_data().
 */
function stanford_earth_events_views_data() {
  $data['views']['table']['group'] = t('Custom Global');
  $data['views']['table']['join'] = [
    // #global is a special flag which allows a table to appear all the time.
    '#global' => [],
  ];
  $data['views']['localist_department_field'] = [
    'title' => t('Department Field for Localist'),
    'help' => t('For exporting events to Stanford Events using Department/Program terms.'),
    'field' => [
      'id' => 'localist_department_field',
    ],
  ];
  $data['views']['stanford_earth_events_media_url'] = [
    'title' => t('Event Image URL for Localist'),
    'help' => t('For exporting events to Stanford Events.'),
    'field' => [
      'id' => 'stanford_earth_events_media_url',
    ],
  ];
  return $data;
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function stanford_earth_events_node_presave(EntityInterface $node) {

  $evtDate = $node->get('field_s_event_date')->getValue();
  if (!empty($evtDate[0]['value'])) {
    $drupalDate = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s',
      $evtDate[0]['value'],
      'Etc/UTC'
    );
  }
  $tz = DrupalDateTime::createFromTimestamp(time())
    ->getTimezone()->getName();
  $when = $drupalDate->format('l F j, Y h:i a',
    ['timezone' => 'America/Los_Angeles']);
  $node->get('field_s_event_when')->setValue($when);
}
