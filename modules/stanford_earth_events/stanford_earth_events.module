<?php

/**
 * @file
 * File description.
 *
 * Long description.
 */

use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\migrate\Row;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\stanford_earth_events\EarthEventsInfo;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;

/**
 * Implements hook_entity_delete().
 */
function stanford_earth_events_entity_delete(EntityInterface $entity) {

  // Only do this for stanford_event content.
  if ($entity->bundle() !== 'stanford_event') {
    return;
  }

  // Delete record from events info table.
  EarthEventsInfo::delete($entity->id());

  // Delete records from migration maps.
  $database = \Drupal::database();
  $eventTables = $database->schema()->findTables('migrate_map_earth_events_importer_%');
  foreach ($eventTables as $table) {
    if (strpos($table, "process") === FALSE) {
      if ($database->schema()->tableExists($table)) {
        $database->delete($table)
          ->condition('destid1', $entity->id())
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function stanford_earth_events_cron() {
}

/**
 * {@inheritdoc}
 */
function stanford_earth_events_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if (substr($migration->id(), 0, 21) === 'earth_events_importer') {

    $event = new EarthEventsInfo($row->getSourceProperty('guid'));
    $event_status = $row->getSourceProperty('field_event_status');
    if ($event_status == 'Unlisted') {
      $row->setSourceProperty('status_code', '0');
    }
    elseif ($event_status == 'CANCELED') {
      if ($event->isUnlisted()) {
        $row->setSourceProperty('status_code', '0');
      }
      else {
        $row->setSourceProperty('status_code', '1');
      }
    }
    else {
      $row->setSourceProperty('status_code', '1');
    }

    // If the event node already exists, set its id in the row data.
    if ($event->isValid()) {
      $entityid = $event->entityId();
      if (!empty($entityid)) {
        $eventNode = Node::load($entityid);

        // If the event node has a media entity image but no image_url in the
        // event itself, the image will get removed unless we set the source
        // image_url (field_s_event_image) to the url of the current image.
        if (empty($row->getSourceProperty('field_s_event_image')) &&
          !empty($eventNode->get('field_s_event_media')->getValue())) {
          $mids = $eventNode->get('field_s_event_media')->getValue();
          $mid = reset($mids);
          if ($mid !== FALSE && !empty($mid['target_id'])) {
            $mediaEntity = \Drupal::getContainer()->get('entity.manager')
              ->getStorage('media')->load($mid['target_id']);
            $fids = $mediaEntity->get('field_media_image')->getValue();
            if (!empty($fids)) {
              $fid = reset($fids);
              if ($fid !== FALSE && !empty($fid['target_id'])) {
                $row->setSourceProperty('field_s_event_image',
                  File::load($fid['target_id'])->getFileUri());
              }
            }
          }
        }
        $row->setSourceProperty('nid', $entityid);
        $row->setDestinationProperty('nid', $entityid);
      }
    }
  }
  return TRUE;
}
